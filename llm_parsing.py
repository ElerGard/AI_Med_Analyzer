import json
import os
from bs4 import BeautifulSoup
from openai import OpenAI
from config import LLM_Settings
import re

def process_html_file(text):
    soup = BeautifulSoup(text, 'html.parser')

    discharge_header = soup.find(string=lambda text: text and 'Выписка из медицинской карты  больного' in text)

    if not discharge_header:
        discharge_header = soup.find(string=lambda text: text and 'Медицинская карта' in text)

    if not discharge_header:
        return f"В файле  не найден заголовок выписки"

    discharge_block = discharge_header.find_parent()

    results = {}
    current_section = None
    text_accumulator = []

    for element in discharge_block.next_elements:
        if element.name == 'b' or element.name == 'center':
            if current_section and (current_section in ['Анамнез жизни', 'Анамнез заболевания'] or current_section[:-1] in ['Анамнез жизни', 'Анамнез заболевания']):
                results[current_section] = ' '.join(text_accumulator).strip()
                text_accumulator = []

            if element.text in ['Анамнез жизни', 'Анамнез заболевания'] or element.text[:-1] in ['Анамнез жизни', 'Анамнез заболевания']:
                current_section = element.text
            else:
                current_section = None

        elif current_section and element.string and element.string.strip():
            text_accumulator.append(element.string.strip())

        if element == discharge_block.find_next_sibling():
            break

    if current_section and (current_section in ['Анамнез жизни', 'Анамнез заболевания'] or current_section[:-1] in ['Анамнез жизни', 'Анамнез заболевания']) and text_accumulator:
        results[current_section] = ' '.join(text_accumulator).strip()

    if "Анамнез жизни:" in results:
        return results['Анамнез жизни:'].replace("Анамнез жизни: ", "")
    else:
        return results['Анамнез жизни'].replace("Анамнез жизни: ", "")


def process_directory(text):

    result = process_html_file(text)
    print(result)
    return result


def parsing_anamnez(text):
    file_path = "data/template.json"
    try:
        input_text = process_directory(text)
        input_text = input_text.split('•')[0].strip()
        input_text = input_text.replace("Страховой анамнез", "")
    except:
        return "", "", ""
    client = OpenAI(base_url=LLM_Settings.BASE_URL, api_key=LLM_Settings.API_KEY)

    with open(file_path, "r", encoding="utf-8") as file:
        file_content = file.read()
        # print(file_content)
    message = [{"role": "user", "content": f"Справочник\n\n{file_content}"},
               {"role": "system", "content": """Твоя задача — преобразовать текст анамнеза жизни пациента в структурированный JSON-шаблон.

    Преобразуй текст анамнеза жизни в JSON-структуру, строго соответствующую формату из Cправочника. Следуй правилам:

    Точное соответствие тексту:

    Включай в JSON только те данные, которые явно указаны в тексте

    Приоритеты при заполнении:

    Используй только значения из файла, если они есть. Например:

    "нет" → "аллергия отсутствует" (из раздела "Наличие аллергии").

    "бросил" → "бывший курильщик".

    Если точного соответствия нет (например, "аппендэктомия"), добавь текст "как есть" в подходящее поле.

    В выходном файле нужно выделить ещё две группы:
    "Сопутствующие и хронические заболевания": [{
        Ключами будут являться заболевания, а значениями отрицает ли пациент или присутствует
    }],
    "Перенесенные заболевания, травмы, Операции": [{
        "Заболевания": {'Качественные значения': []},
        "Травмы": {'Качественные значения': []},
        "операции": {'Качественные значения': []}
    }]

    Запрещено:
    
    Вносить Язвенный и Онкологический анамнез в Сопутствующие и хронические заболевания

    Добавлять поля, которых нет в тексте (например, "Степень тяжести аллергии" для "нет").

    Создавать дублирующие данные (например, аллергия не должна указываться и в "Наличие аллергии", и в "Аллергия на лекарственное средство", если текст этого не требует)."""},

               {"role": "user", "content": """Задача:
    Преобразуй следующий анамнез жизни в JSON по этому шаблону: 
    Вирусные гепатиты, ТВС, вен. заболевания отрицает. Другие заболевания: не отмечает. Аллергия на лекарства: нет. Курил 10 лет, бросил. Операции: аппендэктомия в 2010 г, удаление апендицита. Наследственность: у матери сахарный диабет. в 77 лет у матери ИМ с летальным исходом."""},

               {"role": "assistant", "content": """{
      "Сопутствующие и хронические заболевания": [
        {
          "Вирусные гепатиты": "отрицает",
          "ТВС": "отрицает",
          "Венерические заболевания": "отрицает"
        }
      ],
      "Перенесенные заболевания, травмы, операции": [
        {
          "Операции": {
            "Качественные значения": ["аппендэктомия в 2010 г", "удаление апендицита"]
          }
        }
      ],
      "Вредные привычки": [
        {
          "Курение": [
            {
              "Присутствие": {
                "Качественные значения": ["бывший курильщик"]
              }
            },
            {
              "Длительность употребления (в годах)": {
                "Числовые значения": [10.0]
              }
            }
          ]
        }
      ],
      "Аллергологический анамнез": [
        {
          "Наличие аллергии": [
            {
              "Качественные значения": ["аллергия отсутствует"]
            }
          ]
        }
      ],
      "Наследственный анамнез": [
        {
          "Наличие заболевания у матери": [
            {
              "Заболевание": {
                "Качественные значения": ["ИМ с летальным исходом"]
              },
              "Возраст": {
                "Числовые значения": [77.0]
              }
            }
          ]
        }
      ]
    }"""},

               {"role": "user", "content": """Задача:
        Преобразуй следующий анамнез жизни в JSON по этому шаблону: 
        Вирусные гепатиты отрицает. Туберкулез отрицает. Кожно-венерические заболевания отрицает. Сахарный диабет отрицает. Эпидимиологический анамнез отрицает. Аллергологический анамнез не отягощен. язвенный, онкологический анамнез не отягощен. Гипертоническая болезнь не выявлена. Оперативные вмешательства по другим органам и системам: не отмечает."""},

               {"role": "assistant", "content": """{
  "Сопутствующие и хронические заболевания": [
    {
      "Вирусные гепатиты": "отрицает",
      "Туберкулез": "отрицает",
      "Кожно-венерические заболевания": "отрицает",
      "Сахарный диабет": "отрицает",
      "Гипертоническая болезнь": "не выявлена"
    }
  ],
  "Аллергологический анамнез": [
    {
      "Наличие аллергии": ["аллергия отсутствует"]
    }
  ],
  "Язвенный анамнез": {
        "Качественные значения": ["не отягощен"]
      },
  "Онкологический анамнез": {
        "Качественные значения": ["не отягощен"]
      },
  "Эпидимиологический анамнез": {
        "Качественные значения": ["отрицает"]
  },
  "Перенесенные заболевания, травмы, операции": [
    {
      "Операции": {
        "Качественные значения": ["не отмечает"]
      }
    }
  ]
}
"""},

        {"role": "user", "content": """Задача:
            Преобразуй следующий анамнез жизни в JSON по этому шаблону: 
            Вирусные гепатиты отрицает. Туберкулез отрицает. Кожно-венерические заболевания отрицает. Другие заболевания: ЖКБ. Сахарный диабет отрицает. Операции: на почках. Беременна. Выезд за пределы РФ/ПК за последние 6 месяцев:нет"""},

        {"role": "assistant", "content": """{
      "Сопутствующие и хронические заболевания": [
        {
          "Вирусные гепатиты": "отрицает",
          "Туберкулез": "отрицает",
          "Сахарный диабет": "отрицает",
          "ЖКБ": "имеется"
        }
      ],
      "Перенесенные заболевания, травмы, операции": [
        {
          "Операции": {
            "Качественные значения": ["на почках"]
          }
        }
      ],
      "Акушерский анамнез": [
        {
          "Беременность": {
            "Качественные значения": ["присутствует"]
          }
        }
      ],
      "Эпидемиологический анамнез": [
        {
          "Выезд за пределы РФ/ПК за последние 6 месяцев": {
            "Качественные значения": ["нет"]
           }
        }
      ]

    }
    """},

               {"role": "user", "content": """Задача:
            Преобразуй следующий анамнез жизни в JSON по этому шаблону: 
            Анамнез жизни Вирусные гепатиты, ТВС, вен. заболевания отрицает. Другие заболевания: ЖКБ. Холецистэктомия в 2003г. Хр.панкреатит. . Аллергологические реакции на лекарственные препараты и пищевые продукты: нет. Травмы: нет. Операции: Холеецистэктомия в 2003г. Наследственность: нет. Вредные привычки: нет. Выезд за пределы РФ/ПК за последние 6 месяцев:нет."""},

               {"role": "assistant", "content": """{
              "Сопутствующие и хронические заболевания": [
                {
                  "Вирусные гепатиты": "отрицает",
                  "ТВС": "отрицает",
                  "Венерические заболевания": "отрицает",
                  "ЖКБ": "имеется",
                  "Хронический панкреатит": "присутствует"
                }
              ],
              "Перенесенные заболевания, травмы, операции": [
                {
                  "Операции": {
                    "Качественные значения": ["Холеецистэктомия в 2003г"]
                  }
                },
                {
                  "Травмы": {
                    "Качественные значения": ["Нет"]
                  }
                }
              ],
              "Аллергологический анамнез": [
                {
                  "Наличие аллергии": ["аллергия отсутствует"]
                }
              ],
              "Наследственный анамнез": [{
                    "Отягощенная наследственность": {
                        "Качественные значения": ["наследственность не отягощена"]
                    }
                  }],
              "Вредные привычки": [{
                    "Курение": [
                    {
                      "Присутствие": {
                        "Качественные значения": ["нет"]
                      }
                    }],
                    "Употребление алкоголя": [
                    {
                      "Присутствие": {
                        "Качественные значения": ["нет"]
                      }
                    }],
                    "Употребление наркотиков": [
                    {
                      "Присутствие": {
                        "Качественные значения": ["нет"]
                      }
                    }],
                  }],
              "Эпидемиологический анамнез": [
                {
                  "Выезд за пределы РФ/ПК за последние 6 месяцев": {
                    "Качественные значения": ["нет"]
                   }
                }
              ]
            }
    """},

               {"role": "user", "content": f"""Задача:
    Преобразуй следующий анамнез жизни в JSON по этому шаблону:
    {input_text}"""}
               ]

    completion = client.chat.completions.create(
        model=LLM_Settings.LLM1_NAME,
        messages=message,
        temperature=LLM_Settings.TEMPERATURE,
        max_tokens=-1
    )

    llm1 = completion.choices[0].message.content
    print(llm1)
    print("---------------------LLM1 before---------------------------")
    llm1 = llm1.replace("```json", "").replace("```", "")
    llm1 = re.sub(r'<think>.*?</think>', '', llm1, flags=re.DOTALL)

    try:
        json.loads(llm1)
    except:
        message = [{"role": "system", "content": "Твоя задача исправлять json и приводить в корректный формат. На выходе мне нужен только json"},{"role": "user", "content": f"""Исправь скобки в json {llm1}"""}]

        completion = client.chat.completions.create(
            model=LLM_Settings.LLM1_NAME,
            messages=message,
            temperature=LLM_Settings.TEMPERATURE,
            max_tokens=-1
        )

        llm1 = completion.choices[0].message.content
        print(llm1)
        print("---------------------LLM1 after---------------------------")
    with open(f'output/llm1.json', 'w', encoding='utf-8') as result:
        json.dump(llm1, result, ensure_ascii=False, indent=2)

    completion = client.chat.completions.create(
        model=LLM_Settings.LLM2_NAME,
        messages=message,
        temperature=LLM_Settings.TEMPERATURE,
        max_tokens=-1
    )

    llm2 = completion.choices[0].message.content
    print(llm2)
    print("---------------------LLM2 before---------------------------")
    llm2 = llm2.replace("```json", "").replace("```", "")
    llm2 = re.sub(r'<think>.*?</think>', '', llm2, flags=re.DOTALL)

    try:
        json.loads(llm2)
    except:
        message = [{"role": "system", "content": "Твоя задача исправлять json и приводить в корректный формат. На выходе мне нужен только json"},{"role": "user", "content": f"""Исправь скобки в json {llm2}"""}]

        completion = client.chat.completions.create(
            model=LLM_Settings.LLM2_NAME,
            messages=message,
            temperature=LLM_Settings.TEMPERATURE,
            max_tokens=-1
        )

        llm2 = completion.choices[0].message.content
        print(llm2)
        llm2 = re.sub(r'<think>.*?</think>', '', llm2, flags=re.DOTALL)
        print("---------------------LLM2 after---------------------------")
    with open(f'output/llm2.json', 'w', encoding='utf-8') as result:
        json.dump(llm2, result, ensure_ascii=False, indent=2)

    return llm1, llm2, input_text